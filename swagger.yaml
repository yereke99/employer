openapi: 3.0.3
info:
  title: Employer API
  version: 1.0.0
  description: |
    Simple CRUD API for employees.
servers:
  - url: http://localhost:8080
    description: Local dev

paths:
  /api/employees:
    get:
      summary: Get all employees
      operationId: getAllEmployees
      tags: [Employees]
      responses:
        '200':
          description: A list of employees
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EmployeeResponse'
              examples:
                sample:
                  value:
                    - id: 1
                      name: Alice
                      phone: "+77010000000"
                      city: Almaty
                    - id: 2
                      name: Bob
                      phone: "+77020000000"
                      city: Astana
        '500':
          description: Internal server error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }

    post:
      summary: Create an employee
      operationId: createEmployee
      tags: [Employees]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateEmployeeRequest' }
            examples:
              sample:
                value:
                  name: Alice
                  phone: "+77010000000"
                  city: Almaty
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/EmployeeResponse' }
              examples:
                sample:
                  value:
                    id: 123
                    name: Alice
                    phone: "+77010000000"
                    city: Almaty
        '400':
          description: Validation / bad JSON
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
              examples:
                invalidJson:
                  value: { error: "некорректный JSON" }
                validation:
                  value: { error: "телефон обязателен" }
        '500':
          description: Internal server error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }

  /api/employees/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: Employee ID
        schema:
          type: integer
          minimum: 1

    get:
      summary: Get employee by ID
      operationId: getEmployee
      tags: [Employees]
      responses:
        '200':
          description: Employee
          content:
            application/json:
              schema: { $ref: '#/components/schemas/EmployeeResponse' }
              examples:
                sample:
                  value:
                    id: 7
                    name: Bob
                    phone: "123"
                    city: Astana
        '400':
          description: Bad ID
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
              examples:
                badId:
                  value: { error: "некорректный ID" }
        '404':
          description: Not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
              examples:
                notFound:
                  value: { error: "сотрудник не найден" }
        '500':
          description: Internal server error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }

    put:
      summary: Update employee
      operationId: updateEmployee
      tags: [Employees]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateEmployeeRequest' }
            examples:
              sample:
                value:
                  name: Neo
                  phone: "777"
                  city: Matrix
      responses:
        '200':
          description: Updated employee
          content:
            application/json:
              schema: { $ref: '#/components/schemas/EmployeeResponse' }
              examples:
                sample:
                  value:
                    id: 10
                    name: Neo
                    phone: "777"
                    city: Matrix
        '400':
          description: Bad ID / validation / bad JSON
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
              examples:
                badId:
                  value: { error: "некорректный ID" }
                badJson:
                  value: { error: "некорректный JSON" }
                validation:
                  value: { error: "город обязателен" }
        '404':
          description: Not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
              examples:
                notFound:
                  value: { error: "сотрудник не найден" }
        '500':
          description: Internal server error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }

    delete:
      summary: Delete employee
      operationId: deleteEmployee

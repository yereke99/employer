package main

import (
	"context"
	"employer/config"
	"employer/internal/handler"
	"employer/internal/repository"
	"employer/internal/service"
	"employer/traits/database"
	"employer/traits/logger"
	"net/http"
	"os"
	"os/signal"
	"strings"
	"syscall"
	"time"

	"github.com/gorilla/mux"
	"go.uber.org/zap"
)

func main() {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
	zapLogger, err := logger.NewLogger()
	if err != nil {
		panic(err)
	}
	defer zapLogger.Sync()

	// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	cfg, err := config.NewConfig()
	if err != nil {
		zapLogger.Error("–æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞", zap.Error(err))
		return
	}

	// –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	if err := cfg.ValidateConfig(); err != nil {
		zapLogger.Error("–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", zap.Error(err))
		return
	}

	zapLogger.Info("–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Emplyee",
		zap.String("environment", cfg.Environment),
		zap.String("port", cfg.Port),
		zap.String("db_name", cfg.DBName),
	)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	db, err := database.InitDatabase(cfg, zapLogger)
	if err != nil {
		zapLogger.Error("–æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î", zap.Error(err))
		return
	}
	defer db.Close()

	// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ë–î
	if err := database.CreateTables(db, zapLogger); err != nil {
		zapLogger.Error("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü", zap.Error(err))
		return
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
	repos := repository.NewRepositories(db, zapLogger)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
	services := service.NewServices(repos, zapLogger)

	// –°–æ–∑–¥–∞–Ω–∏–µ HTTP –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
	employeeHandler := handler.NewEmployeeHandler(services.Employee, zapLogger)

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
	router := mux.NewRouter()

	// CORS middleware –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
	corsMiddleware := func(next http.Handler) http.Handler {
		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			// –ü—Ä–∏–º–µ–Ω—è–µ–º CORS —Ç–æ–ª—å–∫–æ –∫ API –∑–∞–ø—Ä–æ—Å–∞–º
			if strings.HasPrefix(r.URL.Path, "/api/") {
				w.Header().Set("Access-Control-Allow-Origin", "*")
				w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
				w.Header().Set("Access-Control-Allow-Headers", "Content-Type, Authorization")

				if r.Method == "OPTIONS" {
					w.WriteHeader(http.StatusOK)
					return
				}
			}

			next.ServeHTTP(w, r)
		})
	}

	// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
	loggingMiddleware := func(next http.Handler) http.Handler {
		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			start := time.Now()
			next.ServeHTTP(w, r)

			// –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–Ω–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã)
			if !strings.HasPrefix(r.URL.Path, "/static/") && r.URL.Path != "/health" {
				zapLogger.Info("HTTP request",
					zap.String("method", r.Method),
					zap.String("url", r.URL.Path),
					zap.String("remote_addr", getClientIP(r)),
					zap.Duration("duration", time.Since(start)),
				)
			}
		})
	}

	// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ middleware
	router.Use(corsMiddleware)
	router.Use(loggingMiddleware)

	// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è API —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
	employeeHandler.RegisterRoutes(router)

	// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (CSS, JS, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
	router.PathPrefix("/static/").Handler(http.StripPrefix("/static/", http.FileServer(http.Dir("./static/"))))

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	serveEmployeePage := func(w http.ResponseWriter, r *http.Request) {
		htmlPath := "./static/employee.html"

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
		w.Header().Set("Content-Type", "text/html; charset=utf-8")
		w.Header().Set("Cache-Control", "no-cache, no-store, must-revalidate")
		w.Header().Set("Pragma", "no-cache")
		w.Header().Set("Expires", "0")

		// –û–±—Å–ª—É–∂–∏–≤–∞–µ–º —Ñ–∞–π–ª
		http.ServeFile(w, r, htmlPath)

		zapLogger.Info("employee page served",
			zap.String("remote_addr", getClientIP(r)),
			zap.String("path", r.URL.Path),
		)
	}

	// –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
	router.HandleFunc("/", serveEmployeePage).Methods("GET")
	router.HandleFunc("/employees", serveEmployeePage).Methods("GET")
	router.HandleFunc("/employee", serveEmployeePage).Methods("GET")

	// Health check endpoint
	router.HandleFunc("/health", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusOK)
		w.Write([]byte(`{"status":"OK","service":"Employee Management"}`))
	}).Methods("GET")

	// Debug endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
	router.HandleFunc("/debug/routes", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusOK)
		routes := []string{
			"GET /",
			"GET /employees",
			"GET /employee",
			"GET /health",
			"GET /static/{file}",
			"GET /api/employees",
			"POST /api/employees",
			"GET /api/employees/{id}",
			"PUT /api/employees/{id}",
			"DELETE /api/employees/{id}",
		}

		response := `{"available_routes":["` + strings.Join(routes, `","`) + `"]}`
		w.Write([]byte(response))
	}).Methods("GET")

	// –°–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Ä–≤–µ—Ä–∞
	srv := &http.Server{
		Handler:      router,
		Addr:         cfg.GetServerAddress(),
		WriteTimeout: 15 * time.Second,
		ReadTimeout:  15 * time.Second,
		IdleTimeout:  60 * time.Second,
	}

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ graceful shutdown
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// –ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –û–°
	stop := make(chan os.Signal, 1)
	signal.Notify(stop, os.Interrupt, syscall.SIGTERM, syscall.SIGINT)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
	checkStaticFiles(zapLogger)

	// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		zapLogger.Info("üöÄ Web App HTTP server started",
			zap.String("local_address", cfg.GetServerAddress()),
			zap.String("environment", cfg.Environment),
		)
		zapLogger.Info("üì± Employee Management Web Interface: https://meily.kz")
		zapLogger.Info("üîß API Endpoints: https://meily.kz/api/employees")
		zapLogger.Info("üè• Health Check: https://meily.kz/health")
		zapLogger.Info("üêõ Debug Routes: https://meily.kz/debug/routes")
		zapLogger.Info("üìÅ Static Files: https://meily.kz/static/")

		if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			zapLogger.Error("failed to start HTTP server", zap.Error(err))
			cancel()
		}
	}()

	// –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	select {
	case <-stop:
		zapLogger.Info("üõë shutdown signal received")
	case <-ctx.Done():
		zapLogger.Info("üõë context cancelled")
	}

	// Graceful shutdown —Å–µ—Ä–≤–µ—Ä–∞
	shutdownCtx, shutdownCancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer shutdownCancel()

	zapLogger.Info("üîÑ shutting down server...")
	if err := srv.Shutdown(shutdownCtx); err != nil {
		zapLogger.Error("‚ùå failed to shutdown server", zap.Error(err))
	}

	zapLogger.Info("‚úÖ Application stopped successfully")
}

// checkStaticFiles –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
func checkStaticFiles(logger *zap.Logger) {
	staticDir := "./static"
	employeeHTML := "./static/employee.html"

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É static
	if _, err := os.Stat(employeeHTML); os.IsNotExist(err) {
		logger.Warn("static directory does not exist, creating it", zap.String("path", staticDir))
		if err := os.MkdirAll(staticDir, 0755); err != nil {
			logger.Error("failed to create static directory", zap.Error(err))
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º employee.html
	if _, err := os.Stat(employeeHTML); os.IsNotExist(err) {
		logger.Warn("employee.html not found",
			zap.String("expected_path", employeeHTML),
			zap.String("solution", "Please create static/employee.html file"),
		)
	} else {
		logger.Info("‚úÖ employee.html found", zap.String("path", employeeHTML))
	}
}

// getClientIP –ø–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π IP –∫–ª–∏–µ–Ω—Ç–∞ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–∫—Å–∏
func getClientIP(r *http.Request) string {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–æ–∫—Å–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
	if xForwardedFor := r.Header.Get("X-Forwarded-For"); xForwardedFor != "" {
		// –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π IP –∏–∑ —Å–ø–∏—Å–∫–∞ (–∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π)
		ips := strings.Split(xForwardedFor, ",")
		return strings.TrimSpace(ips[0])
	}

	if xRealIP := r.Header.Get("X-Real-IP"); xRealIP != "" {
		return strings.TrimSpace(xRealIP)
	}

	if xClientIP := r.Header.Get("X-Client-IP"); xClientIP != "" {
		return strings.TrimSpace(xClientIP)
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º RemoteAddr –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
	return r.RemoteAddr
}
